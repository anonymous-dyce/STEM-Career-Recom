# -*- coding: utf-8 -*-
"""STEM_Career_Recommendation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bN4UiF1cCWg3nu_3lEUNNYju8HCEW6PE
"""

# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.neighbors import NearestNeighbors
import ipywidgets as widgets
from IPython.display import display, clear_output
import matplotlib.pyplot as plt

# Set random seed for reproducibility
np.random.seed(42)

def create_stem_career_dataset():
    """Generate synthetic STEM career data with required skills and traits"""
    stem_careers = [
        'Data Scientist', 'Software Engineer', 'AI/ML Engineer',
        'Cybersecurity Specialist', 'Web Developer', 'Mechanical Engineer',
        'Civil Engineer', 'Electrical Engineer', 'Chemical Engineer',
        'Robotics Engineer', 'Research Scientist', 'Statistician',
        'Mathematician', 'Bioinformatician', 'IT Specialist',
        'Systems Analyst'
    ]

    data = []
    for career in stem_careers:
        entry = {
            'Career': career,
            'Analytical_Skills': np.random.randint(5, 10),
            'Creativity': np.random.randint(3, 9),
            'Communication': np.random.randint(3, 9),
            'Leadership': np.random.randint(2, 8),
            'Technical_Skills': np.random.randint(6, 10),
            'Manual_Dexterity': np.random.randint(2, 8),
            'Stress_Tolerance': np.random.randint(3, 9),
            'Avg_Salary': np.random.randint(60000, 150000)
        }

        # Career-specific boosts (expanded to include all careers and features)
        if career == 'Data Scientist':
            entry['Analytical_Skills'] = np.random.randint(8, 10)
            entry['Technical_Skills'] = np.random.randint(7, 10)
        elif career == 'Software Engineer':
            entry['Technical_Skills'] = np.random.randint(8, 10)
            entry['Analytical_Skills'] = np.random.randint(7, 10)
            entry['Creativity'] = np.random.randint(6, 9)
        elif career == 'AI/ML Engineer':
            entry['Technical_Skills'] = np.random.randint(9, 10)
            entry['Analytical_Skills'] = np.random.randint(8, 10)
            entry['Creativity'] = np.random.randint(7, 10)
        elif career == 'Cybersecurity Specialist':
            entry['Stress_Tolerance'] = np.random.randint(7, 10)
            entry['Technical_Skills'] = np.random.randint(8, 10)
            entry['Analytical_Skills'] = np.random.randint(7, 10)
        elif career == 'Web Developer':
            entry['Technical_Skills'] = np.random.randint(7, 10)
            entry['Creativity'] = np.random.randint(6, 9)
            entry['Communication'] = np.random.randint(5, 8)
        elif career == 'Mechanical Engineer':
            entry['Analytical_Skills'] = np.random.randint(8, 10)
            entry['Technical_Skills'] = np.random.randint(8, 10)
            entry['Manual_Dexterity'] = np.random.randint(7, 10)
        elif career == 'Civil Engineer':
            entry['Analytical_Skills'] = np.random.randint(8, 10)
            entry['Technical_Skills'] = np.random.randint(7, 10)
            entry['Leadership'] = np.random.randint(6, 9)
        elif career == 'Electrical Engineer':
            entry['Analytical_Skills'] = np.random.randint(8, 10)
            entry['Technical_Skills'] = np.random.randint(8, 10)
            entry['Manual_Dexterity'] = np.random.randint(6, 9)
        elif career == 'Chemical Engineer':
            entry['Analytical_Skills'] = np.random.randint(8, 10)
            entry['Technical_Skills'] = np.random.randint(7, 10)
        elif career == 'Robotics Engineer':
            entry['Technical_Skills'] = np.random.randint(9, 10)
            entry['Analytical_Skills'] = np.random.randint(8, 10)
            entry['Manual_Dexterity'] = np.random.randint(8, 10)
        elif career == 'Research Scientist':
            entry['Analytical_Skills'] = np.random.randint(9, 10)
            entry['Technical_Skills'] = np.random.randint(8, 10)
            entry['Creativity'] = np.random.randint(7, 10)
        elif career == 'Statistician':
            entry['Analytical_Skills'] = np.random.randint(9, 10)
            entry['Technical_Skills'] = np.random.randint(7, 10)
        elif career == 'Mathematician':
            entry['Analytical_Skills'] = np.random.randint(9, 10)
            entry['Technical_Skills'] = np.random.randint(8, 10)
            entry['Creativity'] = np.random.randint(6, 9)
        elif career == 'Bioinformatician':
            entry['Analytical_Skills'] = np.random.randint(8, 10)
            entry['Technical_Skills'] = np.random.randint(8, 10)
            entry['Communication'] = np.random.randint(6, 9)
        elif career == 'IT Specialist':
            entry['Technical_Skills'] = np.random.randint(7, 10)
            entry['Stress_Tolerance'] = np.random.randint(6, 9)
            entry['Communication'] = np.random.randint(6, 9)
        elif career == 'Systems Analyst':
            entry['Analytical_Skills'] = np.random.randint(7, 10)
            entry['Technical_Skills'] = np.random.randint(7, 10)

        data.append(entry)

    return pd.DataFrame(data)

# Create STEM dataset
career_df = create_stem_career_dataset()
print(career_df.head())

# 2. Prepare recommendation system
features = [
    'Analytical_Skills', 'Creativity', 'Communication', 'Leadership',
    'Technical_Skills', 'Manual_Dexterity',
    'Stress_Tolerance'
]

# Normalize features (0-1 scale)
career_df[features] = career_df[features].apply(lambda x: x / 10)

# Create NearestNeighbors model
nn = NearestNeighbors(n_neighbors=5, metric='cosine')
nn.fit(career_df[features])

# 3. Create recommendation function
def recommend_careers(user_profile, n_recommendations=5):
    """Recommend careers based on user profile"""
    # Convert user profile to DataFrame
    user_df = pd.DataFrame([user_profile])

    # Find nearest careers
    distances, indices = nn.kneighbors(user_df[features])

    # Get recommended careers
    recommendations = career_df.iloc[indices[0]].copy()
    recommendations['Match_Score'] = 1 - distances[0]
    recommendations['Match_Score'] = recommendations['Match_Score'].apply(lambda x: f"{x:.0%}")

    return recommendations[['Career', 'Match_Score', 'Avg_Salary'] + features]

# 4. Create IPyWidgets interface
# Create widgets for each skill/trait
analytical_slider = widgets.IntSlider(
    value=5,
    min=1,
    max=10,
    step=1,
    description='Analytical Skills:',
    continuous_update=False
)

creativity_slider = widgets.IntSlider(
    value=5,
    min=1,
    max=10,
    step=1,
    description='Creativity:',
    continuous_update=False
)

communication_slider = widgets.IntSlider(
    value=5,
    min=1,
    max=10,
    step=1,
    description='Communication:',
    continuous_update=False
)

leadership_slider = widgets.IntSlider(
    value=5,
    min=1,
    max=10,
    step=1,
    description='Leadership:',
    continuous_update=False
)

technical_slider = widgets.IntSlider(
    value=5,
    min=1,
    max=10,
    step=1,
    description='Technical Skills:',
    continuous_update=False
)

manual_slider = widgets.IntSlider(
    value=5,
    min=1,
    max=10,
    step=1,
    description='Manual Dexterity:',
    continuous_update=False
)

stress_slider = widgets.IntSlider(
    value=5,
    min=1,
    max=10,
    step=1,
    description='Stress Tolerance:',
    continuous_update=False
)

education_dropdown = widgets.Dropdown(
    options=['High School', 'Bachelor', 'Master', 'PhD'],
    value='Bachelor',
    description='Education Level:'
)

experience_slider = widgets.IntSlider(
    value=3,
    min=0,
    max=20,
    step=1,
    description='Years of Experience:',
    continuous_update=False
)

recommend_button = widgets.Button(
    description='Get Career Recommendations',
    button_style='success',
    tooltip='Click to get career suggestions'
)

output = widgets.Output()

# 5. Create recommendation function for button click
def on_recommend_button_clicked(b):
    with output:
        clear_output()

        # Get values from widgets
        user_profile = {
            'Analytical_Skills': analytical_slider.value / 10,
            'Creativity': creativity_slider.value / 10,
            'Communication': communication_slider.value / 10,
            'Leadership': leadership_slider.value / 10,
            'Technical_Skills': technical_slider.value / 10,
            'Manual_Dexterity': manual_slider.value / 10,
            'Stress_Tolerance': stress_slider.value / 10,
            'Education': education_dropdown.value,
            'Experience': experience_slider.value,
        }

        # Get recommendations
        recommendations = recommend_careers(user_profile)

        # Display results
        print("\n=== Top Career Recommendations ===")
        display(recommendations.style.set_properties(**{
            'background-color': '#f0f0f0',
            'color': 'black',
            'border-color': 'white'
        }).format({
            'Avg_Salary': '${:,.0f}',
            'Analytical_Skills': '{:.1f}',
            'Creativity': '{:.1f}',
            'Communication': '{:.1f}',
            'Leadership': '{:.1f}',
            'Technical_Skills': '{:.1f}',
            'Manual_Dexterity': '{:.1f}',
            'Stress_Tolerance': '{:.1f}'
        }))

        # Create visualization
        plt.figure(figsize=(10, 6))
        top_careers = recommendations.head(3)['Career'].tolist()
        top_scores = [float(x.strip('%')) for x in recommendations.head(3)['Match_Score']]

        plt.barh(top_careers, top_scores, color=['#4CAF50', '#2196F3', '#FFC107'])
        plt.xlabel('Match Score (%)')
        plt.title('Top 3 Career Matches')
        plt.xlim(0, 100)

        for index, value in enumerate(top_scores):
            plt.text(value + 2, index, f"{value:.0f}%")

        plt.show()

recommend_button.on_click(on_recommend_button_clicked)

# 6. Display the widgets
display(widgets.VBox([
    widgets.HTML("<h2>STEM Career Recommendation System</h2>"), # Changed title
    widgets.HTML("<p>Rate your skills and traits to get personalized STEM career recommendations:</p>"), # Changed description
    widgets.HBox([analytical_slider, creativity_slider, communication_slider]),
    widgets.HBox([leadership_slider, technical_slider]),
    widgets.HBox([manual_slider, stress_slider]),
    widgets.HBox([education_dropdown, experience_slider]),
    recommend_button,
    output
]))

# 7. Add some explanatory text
display(widgets.HTML("""
<div style="margin-top: 20px; padding: 10px; background-color: #f0f0f0; border-radius: 5px;">
    <h4>About This Tool</h4>
    <p>This STEM career recommendation system suggests potential career paths based on your:</p> # Changed text
    <ul>
        <li>Skills and abilities</li>
        <li>Personality traits</li>
        <li>Education level</li>
        <li>Work experience</li>
    </ul>
    <p><strong>Note:</strong> This is a demonstration using synthetic data. For actual career guidance,
    consult with a professional career counselor.</p>
</div>
"""))